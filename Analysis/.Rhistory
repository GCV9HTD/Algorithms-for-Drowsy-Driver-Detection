#Performing PCA on pca_train
prin_comp = prcomp(pca_train, scale. = F)
names(prin_comp)
prin_comp$center
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
summ = summary(data)
summ
data2 = subset(data, select = -c(id, target, col_990))
sample_train = data %>% group_by(target) %>% sample_frac(.3)
sample_train = subset(sample_train, select = -c(id, target, col_990))
sample_train %>% count(target)
pca_train = subset(sample_train, select = -c(id,target,col_990))
#Performing PCA on pca_train
prin_comp = prcomp(sample_train, scale. = F)
names(prin_comp)
prin_comp$center
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
sample_train = subset(sample_train, select = -c(id, target, col_990, col_266))
sample_train = data %>% group_by(target) %>% sample_frac(.3)
sample_train = subset(sample_train, select = -c(id, target, col_990, col_266))
prin_comp = prcomp(sample_train, scale. = F)
names(prin_comp)
prin_comp$center
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
for (i in 1:10) {
set.seed(i)
print(i)
}
x = 1:100
length(x)
length(x-x-1)
length(x-(x-1))
y = x-x(x-1)
y = x-(x-1)
y
length(y)
x-1
y = x-1
z = x-y
z
fib = function(x){
return((x-1)+(x-2))
}
fib(3)
fib = function(x){
return(print((x-1)+(x-2)))
}
fib(3)
fib = function(x){
return(print((x-1)+(x-2)))
}
fib = function(x){
return(print((x-1), (x-2)))
}
fib(3)
fib = function(x){
return(print((x-1) | (x-2)))
}
fib(3)
library(ggplot2) #For plotting
x = (69, 74, 68, 70, 72, 67, 66, 70, 76, 68, 72, 79, 74, 67, 66, 71, 74, 75, 75, 76)
x = (69 74 68 70 72 67 66 70 76 68 72 79 74 67 66 71 74 75 75 76)
x = c(69, 74, 68, 70, 72, 67, 66, 70, 76, 68, 72, 79, 74, 67, 66, 71, 74, 75, 75, 76)
y = c(153, 175, 155, 135, 172, 150, 115, 137, 200, 130, 140, 265, 185, 112, 140, 150, 165, 185, 210, 220)
mean(x)
print('Mean of x = ', mean(x))
cat('Mean of x = ', mean(x))
cat('Median of x = ', median(x))
mode(x)
which.max(x)
getmode = function(v) {
uniqv = unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
cat('Mode of x = ', getmode(x))
sum(y)
sum(y - mean(y))
length(y)
sum(y - mean(y))/length(y)
for(i in y){
sum(i - mean(y))/length(y)
}
for(i in y){
print(sum(i - mean(y))/length(y))
}
mean(y)
for(i in y){
print(sum(i - mean(y))/length(y))
}
(153-164)/20
for(i in y){
print(sum(i - mean(y))/length(y))
}
length(y)
mean(y)
(153-164.7)/20
for(i in y){
print(sum(i - mean(y)))
}
for(i in y){
z = (sum(i - mean(y)))
}
z/(length(y)-1)
z/20
z/19
z/20
z/(length(y))
lapply(y, function(x){sum(x - mean(y))})
mean(y)
lapply(y, function(x){sum(x - mean(y))})
z = lapply(y, function(x){sum(x - mean(y))})
z
z = lapply(y, function(x){(x - mean(y))})
z
sum(z)
sum(unlist(z))
biased_var = function(y){
for(i in y){
z = (sum(i - mean(y)))
}
return(z/length(y))
}
biased_var(y)
for(i in y){
z = (sum(i - mean(y)))
}
z/(length(y))
biased_var = function(y){
for(i in y){
z = (sum(i - mean(y)))
}
return(z/length(y))
}
biased_var(y)
cat('Sample variance of Y using the biased version is: ',biased_var(y))
ggplot(data = x, aes(x))
ggplot(data = x, aes(x))
x = as.data.frame(x) #as ggplot doesn't work on vector data types
ggplot(data = x, aes(x))
ggplot(data = x, aes(x)) + geom_density(kernel='gaussian', x)
ggplot(data = x, aes(x)) + geom_density(kernel='gaussian', aes(x))
ggplot(data = x) + geom_density(kernel='gaussian', aes(x))
mean(x)
View(x)
x_df = as.data.frame(x) #as ggplot doesn't work on vector data types
ggplot(data = x_df) + geom_density(kernel='gaussian', aes(x_df))
x_df = as.data.frame(x) #as ggplot doesn't work on vector data types
ggplot(data = x_df) + geom_density(kernel='gaussian', aes(x_df))
#creating vectors
x = c(69, 74, 68, 70, 72, 67, 66, 70, 76, 68, 72, 79, 74, 67, 66, 71, 74, 75, 75, 76)
mean(x)
ggplot(data = x_df) + geom_density(kernel='gaussian', aes(x_df))
var(x)
sd(x)
curve(dnorm(x,m=mean(x),sd=sd(x)),from=0,to=20,main="Normal distribution")
mean(x)
sd(x)
curve(dnorm(x,m=71.45,sd=3.817894,from=0,to=20,main="Normal distribution")
curve(dnorm(x,m=71.45,sd=3.817894,from=0,to=20,main="Normal distribution"))
curve(dnorm(x,m=mean(x),sd=sd(x)),from=0,to=20,main="Normal distribution")
mean(x)
curve(dnorm(x,m=71.45,sd=sd(x)),from=0,to=20,main="Normal distribution")
sd(x)
curve(dnorm(x,m=71.45,sd=3.817894),from=0,to=20,main="Normal distribution")
curve(dnorm(x,m=71.45,sd=3.817894),from=0,to=100,main="Normal distribution")
curve(dnorm(x,m=71.45,sd=3.817894),from=0,to=100,main="Probability density function of the normal distribution")
?dnorm
curve()
?curve()
curve(dnorm(x,m=71.45,sd=3.817894),from=0,to=100,main="Probability density function of the normal distribution")
?dnorm()
var(x)
curve(dnorm(x,m=71.45,sd=3.817894),from=0,to=100,main="Probability density function of the normal distribution (Mean = 71.45, Variance = 14.57)")
frequency(x)
frequency(x>80)
?frequency
?frequency
ggplot(data = x_df, aes(x_df$x)) + geom_freqpoly()
x[x>80]
frequency(x>80)
cat('Frequency of X > 80 = ',x[x>80])
cat('Frequency of X > 80 = ',x[x>80])
cat('Frequency of X > 80 = ', print(x[x>80]))
cat('Frequency of X > 80 = ', print(x[x>80]))
cat('Frequency of X > 80 = ', print(x[x>80]))
x[x>80]
cat('Frequency of X > 80 = ')
x[x>80]
cat('Frequency of X > 80 is 0')
x[x>80]
ggplot(data = x_df, aes(x_df$x)) + geom_freqpoly() + ggtitle('Frequency plot of X')
ggplot(data = x_df, aes(x_df$x)) + geom_freqpoly() + ggtitle('Frequency plot of X') + xlab('Values of X')
ggplot(data = x_df, aes(x_df$x)) + geom_freqpoly() + ggtitle('Frequency plot of X') + xlab('Values of X') +xlim(65,100)
ggplot(data = x_df, aes(x_df$x)) + geom_freqpoly() + ggtitle('Frequency plot of X') + xlab('Values of X') +xlim(60,100)
ggplot(data = x_df, aes(x_df$x)) + geom_freqpoly() + ggtitle('Frequency plot of X') + xlab('Values of X') +xlim(50,100)
ggplot(data = x_df, aes(x_df$x)) + geom_freqpoly() + ggtitle('Frequency plot of X') + xlab('Values of X') +xlim(50,100) +geom_vline(xintercept = 80, linetype = "dashed", color = "red", size =2)
ggplot(data = x_df, aes(x_df$x)) + geom_freqpoly() + ggtitle('Frequency plot of X') + xlab('Values of X') +xlim(50,100) +geom_vline(xintercept = 80, linetype = "dashed", color = "red", size =0.5)
ggplot(data = x_df, aes(x_df$x)) + geom_freqpoly() + ggtitle('Frequency plot of X') + xlab('Values of X') +xlim(50,100) +geom_vline(xintercept = 80, linetype = "dashed", color = "red", size =0.5)
length(y)
length(x)
y_df = as.data.frame(y)
main = cbind(x_df, y_df)
View(main)
ggplot(main, aes(x = main$x, y = main$y)) + geom_point() + ggtitle('Scatter Plot of age vs. weight') + xlab('Age') + ylab('Weight')
ggplot(main, aes(x = main$x, y = main$y)) + geom_point(color = 'blue') + ggtitle('Scatter Plot of age vs. weight') + xlab('Age') + ylab('Weight')
View(main)
View(main)
ggplot(main, aes(x = main$x, y = main$y)) + geom_point(color = 'blue') + ggtitle('Scatter Plot of age vs. weight') + xlab('Age') + ylab('Weight') + xlim(60,100)
ggplot(main, aes(x = main$x, y = main$y)) + geom_point(color = 'blue') + ggtitle('Scatter Plot of age vs. weight') + xlab('Age') + ylab('Weight') + xlim(60,90)
ggplot(main, aes(x = main$x, y = main$y)) + geom_point(color = 'blue') + ggtitle('Scatter Plot of age vs. weight') + xlab('Age') + ylab('Weight') + xlim(60,90) + ylim(130,260)
ggplot(main, aes(x = main$x, y = main$y)) + geom_point(color = 'blue') + ggtitle('Scatter Plot of age vs. weight') + xlab('Age') + ylab('Weight') + xlim(60,90) + ylim(130,300)
ggplot(main, aes(x = main$x, y = main$y)) + geom_point(color = 'blue') + ggtitle('Scatter Plot of age vs. weight') + xlab('Age') + ylab('Weight') + xlim(60,90) + ylim(110,300)
#creating dataframes as ggplot only works with them
x_df = as.data.frame(x)
y_df = as.data.frame(y)
main = cbind(x_df, y_df)
#scatter plot
ggplot(main, aes(x = main$x, y = main$y)) + geom_point(color = 'blue') + ggtitle('Scatter Plot of age vs. weight') + xlab('Age') + ylab('Weight') + xlim(60,90) + ylim(110,300)
library(ggplot2) #For plotting
library(cowplot)
library(ggplot2) #For plotting
library(cowplot)
?cor
cor(x,y)
cat('Correlation between age and weight is :' cor(y,x))
cat('Correlation between age and weight is :', cor(y,x))
cat('Correlation between age and weight is :', cor(x,y))
library(ggplot2) #For plotting
library(cowplot) #correlations
detach("package:cowplot", unload=TRUE)
library("cowplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?ggcorr
library(ggplot2) #For plotting
library(GGally) #correlations
ggcorr(main)
ggcorr(main)
cat('Correlation between age and weight is :', cor(x,y))
cov(x,y)
x1 = as.data.frame(c(8,0,10,10,2))
x2 = as.data.frame(c(-20,-1,-19,-20,0))
main2 = cbind(x1,x2)
View(main2)
colnames(main2) = c('x1','x2')
cov(main2)
#two dimensional mean
centeroid = x+y/2
centeroid
a1 = c(2,10)
a2 = c(2,5)
a3 = c(8,4)
centroid <- (a1 + a2 + a3) / 3
centroid
centeroid = x+y/2
centeroid
View(main)
mean(centeroid)
mean(main2)
View(main2)
mean(as.matrix(main2))
cat('Sample covariance matrix of D is :')
cov(main2)
cat('Sample covariance matrix of D is :')
cov(main2)
cat('Sample covariance matrix of D is :', cov(main2))
#Sample covariance matrix is:
cov(main2)
#Sample mean
mean(as.matrix(main2))
#Sample mean
main2_t = t(main)
View(main2_t)
#Sample mean
main2_t = t(main2)
View(main2_t)
#Sample mean
main2_t = as.data.frame(t(main2))
View(main2_t)
#Sample mean
main2_t = t(main2)
n = sum(main[1,])
n = sum(main2_t[1,])
d = sum(main2_t[2,])
n = sum(main2_t[1,])/2
d = sum(main2_t[2,])/2
td_mean = as.matrix(c(n,d),ncol = 1, nrow = 1)
View(td_mean)
print(td_mean)
length(main2_t)
length(main2_t[1,])
n = sum(main2_t[1,])/length(main2_t[1,])
d = sum(main2_t[2,])/length(main2_t[2,])
td_mean = as.matrix(c(n,d),ncol = 1, nrow = 1)
print(td_mean)
cat('Sample mean of matrix D: ', td_mean)
cat('Sample mean of matrix D: ')
td_mean
cat('Sample mean of matrix D: ')
td_mean
cat('Sample mean of matrix D: \n')
td_mean
#Sample covariance matrix:
cat('Sample covariance matrix is: \n', cov(main2))
cov(main2)
#Sample covariance matrix:
cat('Sample covariance matrix is: \\n', cov(main2))
#Sample covariance matrix:
cat('Sample covariance matrix is: \n', cov(main2))
#Sample covariance matrix:
cat('Sample covariance matrix is: \n')
cat('Sample covariance matrix is: \n')
cov(main2)
eigen(main2)
svd(main2)
cov_main2 = cov(main2)
cat('Sample covariance matrix is: \n')
cov_main2
eg(cov_main2)
ev(cov_main2)
eigen(cov_main2)
eigen_main2 = eigen(cov_main2)
#Eigenvalues
eigen_main2$values
---
title: "Literature review"
author: "Kartik Mutya"
date: "9/24/2018"
output:
github_document:
pandoc_args: --webtex
header-includes:
- \usepackage{color}
- \usepackage{xcolor}
- \usepackage{framed}
---
>**The idea of ensemble learning is to build a prediction model by combining
the strengths of a collection of simpler base models.**
This post implements ensemble learning in R using the Titanic dataset from Kaggle and caret package.
library(knitr)
library(kableExtra)
library(dplyr)
table = matrix(NA, nrow = 13, ncol = 11)
colnames(table) = c("Dataset", "Class", "Train", "Test", "Length", "1NN-DTW", "Shapelet", "BOP",  "SAX-VSM", "GAF-MTF", "RP")
table[1,] = c('50words' ,50, 450, 455, 270, 0.242, 0.4429, 0.466, 'N/A' ,0.284, 0.26)
table[2,] = c('Adiac', 37, 390, 391, 176, 0.391, 0.514, 0.432, 0.381, 0.307, 0.28)
table[3,] = c('Beef', 5, 30, 30, 470, 0.467, 0.447, 0.433, 0.033, 0.3, 0.08)
table[4,] = c('Coffee', 2, 28, 28, 286, 0.18, 0.067, 0.036, 0, 0, 0)
table[5,] = c('ECG200', 2, 100, 100, 96, 0.23, 0.227, 0.14, 0.14, 0.08, 0)
table[6,] = c('FaceAll', 14, 560, 1690, 131, 0.192, 0.402, 0.219, 0.207, 0.223, 0.19)
table[7,] = c('Lightning2', 2, 60, 61, 637, 0.131, 0.295, 0.164, 0.196, 0.18, 0)
table[8,] = c('Lightning7', 7, 70, 73, 319, 0.274, 0.403, 0.466, 0.301, 0.397, 0.26)
table[9,] = c('OliveOil', 4, 30, 30, 570, 0.133, 0.213, 0.133, 0.1, 0.167, 0.11)
table[10,] = c('OSULeaf', 6, 200, 242, 427, 0.409, 0.359, 0.236, 0.107, 0.446, 0.29)
table[11,] = c('SwedishLeaf', 15, 500, 625, 128, 0.21, 0.27, 0.198, 0.251, 0.093, 0.06)
table[12,] = c('Yoga', 2, 300, 3000, 426, 0.164, 0.249, 0.17, 0.164, 0.16, 0)
table[13,] = c('Best Perf.','-','-','-','-',1,0,0,2,1,9)
kable(table) %>%
kable_styling("striped", full_width = F, font_size = 9) %>%
row_spec(c(2:8,11,12), bold = T) %>%
row_spec(13, bold = T, color = "white", background = "#D7261E") %>%
footnote(general = "Comparision of various Time series classification algorithms",
general_title = "Table1: ",
footnote_as_chunk = T, title_format = "underline")
# Confusion Matrix
library(data.table)
library(caret)
library(pROC)
# while(!round(roc(df$actual, df$random)$auc,2) == 0.5){
#   df$random = runif(nrow(df))
# }
setwd("/Users/apple/Desktop/FINAL_FINAL/Analysis")
df= fread("all_pred.csv")
cnn = roc(df$Label, df$CNN, ci = T)
cnn_lstm = roc(df$Label, df$CNN_LSTM, ci =T)
vgg16_mtf = roc(df$Label, df$VGG16_mtf, ci = T)
vgg16_rp = roc(df$Label, df$VGG16_rp, ci =T)
vgg19_mtf = roc(df$Label, df$VGG19_mtf, ci =T)
vgg19_rp = roc(df$Label, df$VGG19_rp, ci = T)
boss = roc(df$Label, df$boss, ci = T )
saxvsm = roc(df$Label, df$SAXVSM, ci =T)
knn = roc(df$Label, df$KNN, ci =T)
##############
plot.roc(cnn, xlim=c(1,0), col='blue', legacy.axes=TRUE)
plot.roc(cnn_lstm, legacy.axes=TRUE, xlim=c(0.5,0), add=TRUE,
col='red')
plot.roc(vgg16_mtf, legacy.axes=TRUE, xlim=c(1,0), add=TRUE,
col='magenta')
plot.roc(vgg16_rp, legacy.axes=TRUE, xlim=c(1,0), add=TRUE,
col='darkgreen')
plot.roc(vgg19_mtf, legacy.axes=TRUE, xlim=c(1,0), add=TRUE,
col='cyan')
plot.roc(vgg19_rp, legacy.axes=TRUE, xlim=c(1,0), add=TRUE,
col='pink')
plot.roc(boss, legacy.axes=TRUE, xlim=c(1,0), add=TRUE)
plot.roc(saxvsm, legacy.axes=TRUE, xlim=c(1,0), add=TRUE)
plot.roc(knn, legacy.axes=TRUE, xlim=c(1,0), add=TRUE)
abline(h=0.56, lty=2, col="grey")
plot(saxvsm, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[6],add=T)
plot(saxvsm, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate")
pdf("Final Results smoothed.pdf",pointsize=10)
plot(smooth(cnn), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[1])
plot(smooth(cnn_lstm), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[2],add=T)
plot(smooth(vgg16_rp), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[3],add=T)
plot(smooth(vgg19_mtf), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[4],add=T)
plot(boss, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[5],add=T)
plot(saxvsm, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[6],add=T)
plot(knn, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[7],add=T)
#abline(h=0.56, lty=2, col="grey")
legend(0.3,0.3,legend=c(paste("CNN: ",round(as.numeric(cnn$ci)[2],2),sep=""),
paste("CNN-LSTM:  ",round(as.numeric(cnn_lstm$ci)[2],2),sep=""),
paste("VGG16 (RP):  ", round(as.numeric(vgg16_rp$ci)[2],2),sep=""),
paste("VGG19 (MTF):  ", round(as.numeric(vgg19_mtf$ci)[2],2),sep=""),
paste("BOSSVS:  ", round(as.numeric(boss$ci)[2],2),sep=""),
paste("SAXVSM:  ", round(as.numeric(saxvsm$ci)[2],2),sep=""),
paste("KNN:  ", round(as.numeric(knn$ci)[2],2),sep="")),bty="o",bg="white",box.col="white",
col=cols,lwd=2)
axis(1, at=seq(1,0,by=-0.2), labels=c("0.0","0.2","0.4","0.6","0.8","1.0"),pos=-0.04)
dev.off()
cols=c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","orange","pink")
pdf("Final Results smoothed.pdf",pointsize=10)
plot(smooth(cnn), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[1])
plot(smooth(cnn_lstm), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[2],add=T)
plot(smooth(vgg16_rp), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[3],add=T)
plot(smooth(vgg19_mtf), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[4],add=T)
plot(boss, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[5],add=T)
plot(saxvsm, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[6],add=T)
plot(knn, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[7],add=T)
#abline(h=0.56, lty=2, col="grey")
legend(0.3,0.3,legend=c(paste("CNN: ",round(as.numeric(cnn$ci)[2],2),sep=""),
paste("CNN-LSTM:  ",round(as.numeric(cnn_lstm$ci)[2],2),sep=""),
paste("VGG16 (RP):  ", round(as.numeric(vgg16_rp$ci)[2],2),sep=""),
paste("VGG19 (MTF):  ", round(as.numeric(vgg19_mtf$ci)[2],2),sep=""),
paste("BOSSVS:  ", round(as.numeric(boss$ci)[2],2),sep=""),
paste("SAXVSM:  ", round(as.numeric(saxvsm$ci)[2],2),sep=""),
paste("KNN:  ", round(as.numeric(knn$ci)[2],2),sep="")),bty="o",bg="white",box.col="white",
col=cols,lwd=2)
axis(1, at=seq(1,0,by=-0.2), labels=c("0.0","0.2","0.4","0.6","0.8","1.0"),pos=-0.04)
dev.off()
cols=c("#e41a1c","#377eb8","#4daf4a","#984ea3","grey","orange","pink")
pdf("Final Results smoothed.pdf",pointsize=10)
plot(smooth(cnn), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[1])
plot(smooth(cnn_lstm), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[2],add=T)
plot(smooth(vgg16_rp), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[3],add=T)
plot(smooth(vgg19_mtf), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[4],add=T)
plot(boss, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[5],add=T)
plot(saxvsm, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[6],add=T)
plot(knn, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[7],add=T)
#abline(h=0.56, lty=2, col="grey")
legend(0.3,0.3,legend=c(paste("CNN: ",round(as.numeric(cnn$ci)[2],2),sep=""),
paste("CNN-LSTM:  ",round(as.numeric(cnn_lstm$ci)[2],2),sep=""),
paste("VGG16 (RP):  ", round(as.numeric(vgg16_rp$ci)[2],2),sep=""),
paste("VGG19 (MTF):  ", round(as.numeric(vgg19_mtf$ci)[2],2),sep=""),
paste("BOSSVS:  ", round(as.numeric(boss$ci)[2],2),sep=""),
paste("SAXVSM:  ", round(as.numeric(saxvsm$ci)[2],2),sep=""),
paste("KNN:  ", round(as.numeric(knn$ci)[2],2),sep="")),bty="o",bg="white",box.col="white",
col=cols,lwd=2)
axis(1, at=seq(1,0,by=-0.2), labels=c("0.0","0.2","0.4","0.6","0.8","1.0"),pos=-0.04)
dev.off()
png("Final Results smoothed.png",pointsize=10)
plot(smooth(cnn), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[1])
plot(smooth(cnn_lstm), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[2],add=T)
plot(smooth(vgg16_rp), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[3],add=T)
plot(smooth(vgg19_mtf), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[4],add=T)
plot(boss, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[5],add=T)
plot(saxvsm, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[6],add=T)
plot(knn, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[7],add=T)
#abline(h=0.56, lty=2, col="grey")
legend(0.3,0.3,legend=c(paste("CNN: ",round(as.numeric(cnn$ci)[2],2),sep=""),
paste("CNN-LSTM:  ",round(as.numeric(cnn_lstm$ci)[2],2),sep=""),
paste("VGG16 (RP):  ", round(as.numeric(vgg16_rp$ci)[2],2),sep=""),
paste("VGG19 (MTF):  ", round(as.numeric(vgg19_mtf$ci)[2],2),sep=""),
paste("BOSSVS:  ", round(as.numeric(boss$ci)[2],2),sep=""),
paste("SAXVSM:  ", round(as.numeric(saxvsm$ci)[2],2),sep=""),
paste("KNN:  ", round(as.numeric(knn$ci)[2],2),sep="")),bty="o",bg="white",box.col="white",
col=cols,lwd=2)
axis(1, at=seq(1,0,by=-0.2), labels=c("0.0","0.2","0.4","0.6","0.8","1.0"),pos=-0.04)
dev.off()
cols=c("#e41a1c","#377eb8","#4daf4a","#984ea3","yellow","orange","pink")
png("Final Results smoothed.png",pointsize=10)
plot(smooth(cnn), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[1])
plot(smooth(cnn_lstm), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[2],add=T)
plot(smooth(vgg16_rp), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[3],add=T)
plot(smooth(vgg19_mtf), print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[4],add=T)
plot(boss, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[5],add=T)
plot(saxvsm, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[6],add=T)
plot(knn, print.auc=F, main="",xaxt="n",ylab="True Positive Rate", xlab="False Positive Rate",col=cols[7],add=T)
#abline(h=0.56, lty=2, col="grey")
legend(0.3,0.3,legend=c(paste("CNN: ",round(as.numeric(cnn$ci)[2],2),sep=""),
paste("CNN-LSTM:  ",round(as.numeric(cnn_lstm$ci)[2],2),sep=""),
paste("VGG16 (RP):  ", round(as.numeric(vgg16_rp$ci)[2],2),sep=""),
paste("VGG19 (MTF):  ", round(as.numeric(vgg19_mtf$ci)[2],2),sep=""),
paste("BOSSVS:  ", round(as.numeric(boss$ci)[2],2),sep=""),
paste("SAXVSM:  ", round(as.numeric(saxvsm$ci)[2],2),sep=""),
paste("KNN:  ", round(as.numeric(knn$ci)[2],2),sep="")),bty="o",bg="white",box.col="white",
col=cols,lwd=2)
axis(1, at=seq(1,0,by=-0.2), labels=c("0.0","0.2","0.4","0.6","0.8","1.0"),pos=-0.04)
dev.off()
confusionMatrix(df$CNN, df$Label)
